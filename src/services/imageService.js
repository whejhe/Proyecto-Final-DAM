import { Platform } from 'react-native';
// Ya no se necesita FileSystem si siempre pasas la base64 pura
// import * as FileSystem from 'expo-file-system';

const MAX_FILE_SIZE_BYTES = 5 * 1024 * 1024; // 5 MB

export const isValidImageSize = (fileSizeInBytes) => {
  if (fileSizeInBytes === undefined || fileSizeInBytes === null) {
    // Si no se puede determinar el tama√±o, lo consideramos v√°lido por ahora para no bloquear.
    // Podr√≠amos optar por ser m√°s estrictos y devolver false.
    console.warn('isValidImageSize: No se pudo determinar el tama√±o del archivo.');
    return { isValid: true }; 
  }
  if (fileSizeInBytes > MAX_FILE_SIZE_BYTES) {
    const sizeInMB = (fileSizeInBytes / (1024 * 1024)).toFixed(2);
    const maxSizeInMB = (MAX_FILE_SIZE_BYTES / (1024 * 1024)).toFixed(2);
    return {
      isValid: false,
      message: `El archivo (${sizeInMB} MB) excede el l√≠mite de ${maxSizeInMB} MB.`
    };
  }
  return { isValid: true };
};

const uploadImageToImgbb = async (base64Image) => { // Renombrado para claridad
  try {
    // Asumimos que base64Image es la cadena pura de base64
    // No se necesita la l√≥gica destartsWith('data:image') o Platform.OS para FileSystem

    const formData = new FormData();
    formData.append('image', base64Image);

    // Define la URL de la API de imgbb
    const apiKey = '433a8235d181ea9eebb2388ba866595a'; // Considera mover esto a una variable de entorno o configuraci√≥n
    const url = `https://api.imgbb.com/1/upload?key=${apiKey}`;

    // Realiza la solicitud POST a imgbb
    const response = await fetch(url, {
      method: 'POST',
      body: formData,
    });

    const data = await response.json();

    if (data.success) {
      console.log('‚úÖ Imagen subida con √©xito:', data.data.display_url);
      console.log('üóëÔ∏è URL de eliminaci√≥n:', data.data.delete_url);
      return {
        display_url: data.data.url, // 'url' es la URL de visualizaci√≥n directa
        delete_url: data.data.delete_url 
      };
    } else {
      // Proporcionar m√°s detalles del error de ImgBB si est√°n disponibles
      console.error('‚ùå Error al subir la imagen a ImgBB:', data.error ? data.error.message || data.error : 'Error desconocido de ImgBB');
      return null;
    }
  } catch (error) {
    console.error('‚ùå Error en la funci√≥n uploadImageToImgbb:', error);
    return null;
  }
};

const deleteImageFromImgbb = async (deleteUrl) => {
  try {
    // ImgBB no proporciona una API de eliminaci√≥n directa que pueda ser llamada con 'fetch' de forma simple
    // La delete_url es para ser abierta en un navegador y confirmar manualmente.
    // Para una eliminaci√≥n program√°tica real, se necesitar√≠a un backend o un servicio que pueda interactuar con esa p√°gina.
    console.warn(`Para eliminar la imagen, abre esta URL en un navegador: ${deleteUrl}`);
    // Aqu√≠ podr√≠as intentar una solicitud GET si ImgBB lo permitiera para alguna forma de eliminaci√≥n,
    // pero su documentaci√≥n no lo indica.
    // Por ahora, esta funci√≥n act√∫a como un placeholder y registra la URL.
    // const response = await fetch(deleteUrl, { method: 'GET' }); // Esto probablemente no funcionar√° como se espera.
    // if (response.ok) { // Asumiendo que una respuesta ok significar√≠a eliminaci√≥n
    //   console.log('Imagen marcada para eliminaci√≥n en ImgBB (o eliminada si la URL GET directa funcionara).');
    //   return true;
    return true; // Simular √©xito para el flujo de la aplicaci√≥n
  } catch (error) {
    console.error('‚ùå Error en la funci√≥n deleteImageFromImgbb:', error);
    return false;
  }
};

export { uploadImageToImgbb, deleteImageFromImgbb };